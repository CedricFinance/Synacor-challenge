const sprintf = require('sprintf').sprintf;

const labels = new Map([
  [0x015b, "test_jmp_1"],
  [0x0166, "test_jmp_2"],
  [0x0170, "err_jmp_minus_2"],
  [0x018d, "err_jmp_minus_1"],
  [0x01a8, "err_jmp_plus_1"],
  [0x01c5, "err_jmp_plus_2"],
  [0x01e4, "test_jt_no_jump"],
  [0x01e7, "test_jf_no_jump"],
  [0x01ea, "test_jt_jump"],
  [0x01ef, "test_jf_jump"],
  [0x01f4, "test_r0_initial_value"],
  [0x01f7, "test_r1_initial_value"],
  [0x01fa, "test_r2_initial_value"],
  [0x01fd, "test_r3_initial_value"],
  [0x0200, "test_r4_initial_value"],
  [0x0203, "test_r5_initial_value"],
  [0x0206, "test_r6_initial_value"],
  [0x0209, "test_r7_initial_value"],
  [0x021f, "err_no_add"],
  [0x0234, "test_eq"],
  [0x023b, "err_no_eq"],
  [0x024e, "test_push_pop"],
  [0x0264, "test_gt"],
  [0x0279, "test_and"],
  [0x0284, "test_or"],
  [0x028f, "err_no_or"],
  [0x02ac, "test_not"],
  [0x02c0, "test_call_with_address"],
  [0x02c4, "verify_stack"],
  [0x02d4, "test_call_with_register"],
  [0x02db, "verify_stack_2"],
  [0x02eb, "test_add_modulo"],
  [0x030b, "test_mult"],
  [0x0328, "test_mod"],
  [0x034b, "rmem_data"],
  [0x034d, "test_rmem"],
  [0x0365, "test_wmem"],
  [0x03ad, "err_wmem"],
  [0x03d2, "fct_xxx"],
  [0x03e8, "copy_str_loop"],
  [0x03ff, "label_03ff"],
  [0x0432, "err_no_jt_jf"],
  [0x0445, "err_non_zero_register"],
  [0x045e, "err_no_set"],
  [0x0473, "err_no_gt"],
  [0x0486, "err_no_stack"],
  [0x0499, "err_no_and"],
  [0x04b8, "err_no_not"],
  [0x04d7, "err_no_rmem"],
  [0x04ee, "err_no_wmem"],
  [0x0505, "jumping_function"],
  [0x0507, "jumping_function_2"],
  [0x0509, "err_no_call"],
  [0x0520, "err_no_modulo_add_mult"],
  [0x0565, "err_no_hitchhiking"],
  [0x0586, "err_no_mult"],
  [0x059d, "err_no_mod"],
  [0x05b2, "forEach(array:r0, fct:r1)"],
  [0x05c8, "label_05c8"],
  [0x05e3, "label_05e3"],
  [0x05ee, "printString(r0)"],
  [0x05f8, "print(r0)"],
  [0x05fb, "decryptAndPrint(value:r0, key:r2)"],
  [0x0607, "label_0607"],
  [0x061b, "label_061b"],
  [0x061e, "label_061e"],
  [0x0623, "label_0623"],
  [0x0634, "label_0634"],
  [0x0652, "label_0652"],
  [0x066d, "label_066d"],
  [0x0682, "label_0682"],
  [0x0683, "label_0683"],
  [0x06aa, "label_06aa"],
  [0x06af, "label_06af"],
  [0x06b2, "label_06b2"],
  [0x06bb, "decrypt"],
  [0x06c2, "_decrypt_loop"],
  [0x06e7, "readLine(length:r0, buffer:r1)"],
  [0x06fb, "label_06fb"],
  [0x0718, "label_0718"],
  [0x071b, "label_071b"],
  [0x0726, "label_0726"],
  [0x0731, "label_0731"],
  [0x073c, "label_073c"],
  [0x0758, "label_0758"],
  [0x075e, "label_075e"],
  [0x07a0, "label_07a0"],
  [0x07d1, "label_07d1"],
  [0x07e3, "label_07e3"],
  [0x07f8, "label_07f8"],
  [0x07ff, "label_07ff"],
  [0x080c, "label_080c"],
  [0x082c, "label_082c"],
  [0x0833, "label_0833"],
  [0x0840, "label_0840"],
  [0x084d, "xor(r0,r1)"],
  [0x089c, "label_089c"],
  [0x08a2, "label_08a2"],
  [0x08b9, "label_08b9"],
  [0x08bc, "label_08bc"],
  [0x08c1, "label_08c1"],
  [0x08c8, "label_08c8"],
  [0x08cc, "label_08cc"],
  [0x08e4, "label_08e4"],
  [0x08e9, "label_08e9"],
  [0x08f8, "label_08f8"],
  [0x0905, "label_0905"],
  [0x0908, "label_0908"],
  [0x0aac, "value_0aac"],
  [0x0aad, "value_0aad"],
  [0x0aae, "label_0aae"],
  [0x0ab6, "label_0ab6"],
  [0x0ad2, "label_0ad2"],
  [0x0ae7, "label_0ae7"],
  [0x0b20, "label_0b20"],
  [0x0b45, "label_0b45"],
  [0x0b6c, "label_0b6c"],
  [0x0b7b, "label_0b7b"],
  [0x0b80, "label_0b80"],
  [0x0b86, "label_0b86"],
  [0x0b94, "fct_0b94"],
  [0x0bbe, "label_0bbe"],
  [0x0bd8, "label_0bd8"],
  [0x0c20, "label_0c20"],
  [0x0c4a, "label_0c4a"],
  [0x0c75, "label_0c75"],
  [0x0c79, "label_0c79"],
  [0x0c90, "label_0c90"],
  [0x0ca6, "label_0ca6"],
  [0x0ce6, "label_0ce6"],
  [0x0cfe, "label_0cfe"],
  [0x0d81, "label_0d81"],
  [0x0d99, "label_0d99"],
  [0x0dd3, "label_0dd3"],
  [0x0deb, "label_0deb"],
  [0x0e11, "label_0e11"],
  [0x0e2b, "label_0e2b"],
  [0x0e43, "label_0e43"],
  [0x0e6e, "label_0e6e"],
  [0x0e8f, "label_0e8f"],
  [0x0f64, "label_0f64"],
  [0x107a, "label_107a"],
  [0x10b0, "label_10b0"],
  [0x10b7, "label_10b7"],
  [0x1111, "label_1111"],
  [0x1121, "label_1121"],
  [0x1127, "label_1127"],
  [0x112e, "label_112e"],
  [0x1135, "label_1135"],
  [0x1152, "label_1152"],
  [0x11a3, "label_11a3"],
  [0x11b5, "label_11b5"],
  [0x11d5, "label_11d5"],
  [0x11de, "label_11de"],
  [0x11f4, "label_11f4"],
  [0x1200, "label_1200"],
  [0x1203, "label_1203"],
  [0x1225, "label_1225"],
  [0x122a, "label_122a"],
  [0x1231, "label_1231"],
  [0x1234, "label_1234"],
  [0x126d, "label_126d"],
  [0x12fa, "label_12fa"],
  [0x1312, "label_1312"],
  [0x1371, "label_1371"],
  [0x1399, "label_1399"],
  [0x14c0, "label_14c0"],
  [0x14d8, "label_14d8"],
  [0x15cb, "label_15cb"],
  [0x15e5, "label_15e5"],
  [0x1604, "label_1604"],
  [0x1652, "label_1652"],
  [0x16b6, "label_16b6"],
  [0x16bf, "label_16bf"],
  [0x16ef, "label_16ef"],
  [0x16f4, "label_16f4"],
  [0x171e, "label_171e"],
  [0x1721, "label_1721"],
  [0x1744, "label_1744"],
  [0x1747, "label_1747"],
  [0x1765, "label_1765"],
  [0x1766, "label_1766"],
  [0x1783, "label_1783"],
  [0x1786, "label_1786"],
  [0x178b, "label_178b"],
  [0x1793, "label_1793"],
  [0x17a0, "label_17a0"],
  [0x17b4, "s_test_string"],
  [0x17c0, "s_self_test_result"],
  [0x17d3, "s_all_tests_pass"],
  [0x17e4, "s_complete"],
  [0x17ed, "a_???"],
  [0x17f1, "a_???"],
  [0x17fe, "s_foothills"],
  [0x1808, "s_foothills_desc"],
  [0x18c0, "s_foothills_dir_1"],
  [0x18c8, "s_foothills_dir_2"],
  [0x18ce, "s_foothills_south"],
  [0x18d8, "s_foothills_south_desc"],
  [0x1923, "s_foothills_south_dir_1"],
  [0x1929, "s_dark_cave"],
  [0x1933, "s_dark_cave_desc"],
  [0x19b9, "s_dark_cave_dir_1"],
  [0x19bf, "s_dark_cave_dir_2"],
  [0x4af8, "s_orb"],
  [0x4afc, "s_orb_desc"],
  [0x4b3a, "s_mirror"],
  [0x4b41, "s_mirror_desc"],
  [0x4bb8, "s_book"],
  [0x4bc5, "s_book_content"],
  [0x564d, "s_journal"],
  [0x5655, "s_journal_content"],
  [0x650a, "s_letters"],
  [0x6576, "a_input_buffer"],
  [0x6597, "s_green"],
  [0x659d, "s_red"],
  [0x65a1, "s_yellow"],
  [0x65a8, "s_???"],
  [0x65e8, "s_???"],
  [0x660a, "s_???"],
  [0x663a, "s_???"],
  [0x667b, "s_???"],
  [0x669b, "s_???"],
  [0x66bb, "s_???"],
  [0x66d1, "s_???"],
  [0x66f2, "s_???"],
  [0x671e, "s_???"],
  [0x68e3, "a_crypted_self_test_code"],
  [0x695b, "a_???"],
  [0x7007, "a_???"],
  [0x7026, "a_???"],
  [0x7069, "a_???"],
  [0x70ac, "a_???"],
  [0x7156, "a_???"],
  [0x7239, "a_???"],
  [0x723d, "a_???"],
  [0x72d8, "a_???"],
  [0x7369, "a_???"],
  [0x73df, "a_???"],
  [0x73e3, "a_???"],
  [0x743d, "a_???"],
  [0x74f6, "a_???"],
  [0x74fa, "a_???"],
]);

function has(address) {
  return labels.has(address);
}

function get(address) {
  return labels.get(address) || "";
}

function byAddress([firstAddress], [secondAddress]) {
  return firstAddress - secondAddress;
}

function format(labels) {
  console.log("const labels = new Map([");
  for (var [address, label] of Array.from(labels.entries()).sort(byAddress)) {
    console.log(`  [${sprintf("0x%04x",address)}, "${label}"],`);
  }
  console.log("]);");
}

module.exports = {
  labelFor: get,
  has,
  get,
  all: new Map(labels),
  format
}